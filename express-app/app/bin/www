#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io   = require("socket.io")(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  }
});
// const { Server } = require("socket.io");
// const io = new Server(server)
// io.on('connection', socket => {
//   console.log("okoko"); 
// });
io.sockets.on('connection', socket => {
  //console.log("clear 2nd");
  // convenience function to log server messages on the client
  function log(text) {
    socket.emit('log', `Message from server: ${text}`)
  }
  socket.on('message', message => {
    console.log(`Client said: ${message}`)
    // for a real app, would be room-only (not broadcast)
    socket.broadcast.emit('message', message)
  })
  socket.on('create or join', room => {
    console.log('Received request to create or join room ' + room)
    const clientsInRoom = io.sockets.adapter.rooms.get(room);
    console.log(io.sockets.adapter.rooms.get('foo'));
    const numClients = clientsInRoom ? clientsInRoom.size : 0
    console.log('Room ' + room + ' now has ' + numClients + ' client(s)')
    if (numClients === 0) {
      socket.join(room)
      console.log('Client ID ' + socket.id + ' created room ' + room)
      socket.emit('created', room, socket.id)
    } else if (numClients === 1) {
      console.log('Client ID ' + socket.id + ' joined room ' + room)
      io.sockets.in(room).emit('join', room)
      socket.join(room)
      socket.emit('joined', room, socket.id)
      io.sockets.in(room).emit('ready')
    } else {
      // max two clients
      socket.emit('full', room)
    }
  })
  socket.on('ipaddr', () => {
    const ifaces = os.networkInterfaces()
    for (const dev in ifaces) {
      ifaces[dev].forEach(details => {
        if (details.family === 'IPv4' && details.address !== '127.0.0.1') {
          socket.emit('ipaddr', details.address)
        }
      })
    }
  })
  socket.on('bye', () => {
    console.log('received bye')
  })
  socket.on('connect', () => {
    console.log('connect')
  })
  socket.on('disconnect', () => {
    console.log(`[disconnect] ${socket.id}`)
    console.log(Object.keys(io.sockets.connected))
  })
})
io.sockets.on('connect', socket => {
  console.log(`[connect] ${socket.id}`)
  //console.log(Object.keys(io.sockets.connected))
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
